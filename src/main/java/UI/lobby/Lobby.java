package UI.lobby;

import UI.Navigable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseListener;
import java.util.Locale;

public class Lobby extends Navigable {

    private JPanel panel1;
    private JLabel cancel;
    private JScrollPane scrollPane;
    private JPanel users;
    private JPanel invitation;

    public Lobby() {
        mainPanel.add(panel1, BorderLayout.CENTER);
        users.setLayout(new BoxLayout(users, BoxLayout.Y_AXIS));
        users.setPreferredSize(new Dimension(400, 600));
        cancel.addMouseListener(this);
        cancel.setPreferredSize(new Dimension(50, 50));
    }

    protected void addName(String name) {
        var label = new JLabel(name);
        label.addMouseListener(this);
        label.setName(name);
        users.add(label);
        users.validate();
    }

    protected void clearNames() {
        users.removeAll();
    }

    public void showInvite(String from) {
        invitation = new Invitation(from, this);
        mainPanel.removeAll();
        mainPanel.add(invitation, BorderLayout.CENTER);
        mainPanel.revalidate();
    }

    public void removeInvite() {
        mainPanel.removeAll();
        mainPanel.add(panel1, BorderLayout.CENTER);
        mainPanel.revalidate();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setEnabled(false);
        Font label1Font = this.$$$getFont$$$(null, -1, 48, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Game Lobby");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancel = new JLabel();
        Font cancelFont = this.$$$getFont$$$(null, -1, 28, cancel.getFont());
        if (cancelFont != null) cancel.setFont(cancelFont);
        cancel.setText("back");
        panel1.add(cancel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 20), new Dimension(-1, 100), new Dimension(-1, 100), 0, false));
        scrollPane = new JScrollPane();
        panel1.add(scrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        users = new JPanel();
        users.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane.setViewportView(users);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private static class Invitation extends JPanel {

        public Invitation(String sender, MouseListener parent) {
            setLayout(new BorderLayout());
            add(new JLabel("New invitation from " + sender), BorderLayout.CENTER);
            var accept = new JLabel("Accept");
            var decline = new JLabel("Decline");
            accept.addMouseListener(parent);
            decline.addMouseListener(parent);
            accept.setName("accept " + sender);
            decline.setName("decline " + sender);
            add(accept, BorderLayout.NORTH);
            add(decline, BorderLayout.SOUTH);
        }
    }


}
